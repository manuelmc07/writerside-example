openapi: 3.0.2
info:
  title: Localhost CRUD API
  description: A simple API to demonstrate CRUD operations on a localhost server
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /items:
    get:
      summary: Get all items
      description: Retrieve a list of all items
      operationId: getItems
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new item
      description: Add a new item to the list
      operationId: createItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /items/:id:
    get:
      summary: Get a single item
      description: Retrieve a single item by its ID
      operationId: getItemById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the item
      responses:
        '200':
          description: The requested item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update an item
      description: Update an existing item by its ID
      operationId: updateItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the item
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete an item
      description: Delete an item by its ID
      operationId: deleteItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the item
      responses:
        '200':
          description: Item deleted successfully
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "Item 1"
        description:
          type: string
          example: "This is an item description"
      required:
        - name

    Error:
      type: object
      properties:
        type:
          type: string
          example: "about:blank"
        title:
          type: string
          example: "Error"
        detail:
          type: string
          example: "An error occurred"
        instance:
          type: string
          example: "/items"
        timestamp:
          type: string
          format: date-time
          example: "2024-09-20T14:00:00Z"
        time:
          type: integer
          example: 1726846312308

